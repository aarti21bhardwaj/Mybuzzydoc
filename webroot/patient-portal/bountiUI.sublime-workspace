{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"redee",
				"redeemedCredit"
			],
			[
				"tango",
				"tangoCard"
			],
			[
				"attrib",
				"attribute"
			],
			[
				"att",
				"attributeType\t(ApiController.php)"
			],
			[
				"attri",
				"attribute"
			],
			[
				"attribute",
				"attributeType\t(ApiController.php)"
			],
			[
				"vend",
				"vendor_id"
			],
			[
				"vendor",
				"vendor_reward_type_id"
			],
			[
				"rew",
				"rewardMethod\t(RewardCreditsController.php)"
			],
			[
				"rewar",
				"reward_type"
			],
			[
				"toke",
				"tokenData"
			],
			[
				"tan",
				"tangocard\t(bootstrap.php)"
			],
			[
				"redeemed",
				"redeemedCredits"
			],
			[
				"ta",
				"tangocard"
			],
			[
				"searc",
				"searchPatient"
			],
			[
				"new",
				"newUserContainer"
			],
			[
				"fade",
				"fadeIn"
			],
			[
				"res",
				"resetPwdHash"
			],
			[
				"Una",
				"UnauthorizedException"
			],
			[
				"ol",
				"oldPassword"
			],
			[
				"cn",
				"cnfNewPwd"
			],
			[
				"Con",
				"Content-Type"
			],
			[
				"old",
				"oldPwd"
			],
			[
				"text",
				"text-center\t(login.ctp)"
			],
			[
				"user",
				"userUpdate"
			],
			[
				"chc",
				"checkExistPasswordHash"
			],
			[
				"patch",
				"patchEntity"
			],
			[
				"pass",
				"password"
			],
			[
				"chec",
				"checkExistPasswordHash"
			],
			[
				"reset",
				"resetPassword"
			],
			[
				"for",
				"forgotPassword"
			],
			[
				"req",
				"request"
			],
			[
				"_res",
				"_createResetPasswordHash〔function〕"
			],
			[
				"cnf",
				"cnf_new_pwd\t(edit.ctp)"
			],
			[
				"us",
				"userOldPasswordCheck"
			],
			[
				"ov",
				"overflow-y"
			],
			[
				"lega",
				"legacyReward"
			],
			[
				"bas",
				"basepath"
			],
			[
				"legac",
				"legacyRewards"
			],
			[
				"pa",
				"parent"
			],
			[
				"re",
				"return"
			],
			[
				"vendorRe",
				"vendorRewardInfo"
			],
			[
				"vendorR",
				"vendorRewardData"
			],
			[
				"erro",
				"errorKey"
			],
			[
				"err",
				"errorKey"
			],
			[
				"va",
				"value"
			],
			[
				"parte",
				"parentKey"
			],
			[
				"inva",
				"invalidValue"
			],
			[
				"obje",
				"objectData"
			],
			[
				"o",
				"object\t<object>"
			],
			[
				"er",
				"errors"
			],
			[
				"le",
				"legacyReward"
			],
			[
				"rewa",
				"reward_method"
			],
			[
				"sto",
				"store_credit\t(RewardCreditsController.php)"
			],
			[
				"wal",
				"wallet_credit\t(RewardCreditsController.php)"
			],
			[
				"sessio",
				"sessionData"
			],
			[
				"sessi",
				"sessionData"
			],
			[
				"sess",
				"sessionData"
			],
			[
				"pe",
				"peopleHubData"
			],
			[
				"or",
				"org_name"
			],
			[
				"tota",
				"total_transactions"
			],
			[
				"str",
				"strtolower\t(UsersController.php)"
			],
			[
				"fie",
				"fields"
			],
			[
				"ke",
				"key"
			],
			[
				"ret",
				"return"
			],
			[
				"dat",
				"data"
			],
			[
				"pare",
				"parentKey"
			],
			[
				"ar",
				"array"
			],
			[
				"fir",
				"first_key"
			],
			[
				"ve",
				"vendorBills"
			],
			[
				"bill",
				"billUptoDate"
			],
			[
				"test",
				"testToken"
			],
			[
				"cre",
				"create"
			],
			[
				"Rewa",
				"RewardCreditsController\t(RewardCreditsController.php)"
			],
			[
				"form",
				"format\t(VendorBillingsController.php)"
			],
			[
				"service",
				"service_id\t(ApiController.php)"
			],
			[
				"Resel",
				"ResellerVendors\t(ApiController.php)"
			],
			[
				"e",
				"entity"
			],
			[
				"Res",
				"Resellers"
			],
			[
				"Rese",
				"Reseller\t(ApiController.php)"
			],
			[
				"Vend",
				"VendorContacts"
			],
			[
				"Ve",
				"VendorRewardTypes"
			],
			[
				"ven",
				"vendor"
			],
			[
				"reward",
				"reward_method_id\t(ApiController.php)"
			],
			[
				"rese",
				"reseller"
			],
			[
				"resel",
				"resellerId"
			],
			[
				"Re",
				"Reseller"
			],
			[
				"get",
				"getVendorBill"
			],
			[
				"total",
				"totalPoints"
			],
			[
				"totalBil",
				"totalBillAmount"
			],
			[
				"ge",
				"getVendorBill"
			],
			[
				"b",
				"billUptoDate"
			],
			[
				"Vendor",
				"VendorBillings"
			],
			[
				"Resell",
				"ResellerVendors"
			],
			[
				"bi",
				"billFromDate"
			],
			[
				"select",
				"selected"
			],
			[
				"sele",
				"selected\tAttr"
			],
			[
				"consol",
				"console.log"
			],
			[
				"all",
				"allBills"
			],
			[
				"fr",
				"from_date"
			],
			[
				"to",
				"to_date"
			],
			[
				"points",
				"points_redeemed"
			],
			[
				"billin",
				"billingData"
			],
			[
				"sum",
				"sumOf"
			],
			[
				"userwa",
				"userWalletCreditInfo"
			],
			[
				"ec",
				"existingVendorRewardCreditData"
			],
			[
				"cred",
				"creditReq"
			],
			[
				"ex",
				"existingVendorRewardCredit"
			],
			[
				"vendor_rew",
				"vendor_reward_type_id"
			],
			[
				"attr",
				"attribute_type"
			],
			[
				"exi",
				"existing\t(VendorsController.php)"
			],
			[
				"billda",
				"billFromDate"
			],
			[
				"Redeeme",
				"RedeemedCredits"
			],
			[
				"Rew",
				"RewardCredits"
			],
			[
				"v",
				"vendor_id"
			],
			[
				"contact",
				"contact_detail"
			],
			[
				"con",
				"contact"
			],
			[
				"json",
				"json_decode〔function〕"
			],
			[
				"set",
				"setCrudId\t(Api.php)"
			],
			[
				"A",
				"Api〔class〕"
			],
			[
				"prin",
				"print_r〔function〕"
			],
			[
				"Erri",
				"ErrorStrings"
			],
			[
				"st",
				"string"
			],
			[
				"s",
				"INVALID_STATUS_VALUE\tmixed"
			],
			[
				"in",
				"INVALID_IS_PRIMARY_VALUE\tmixed"
			],
			[
				"ph",
				"PHONE_LINKED_WITH_ANOTHER_ACCOUNT\tmixed"
			],
			[
				"error",
				"ErrorStrings\tErrorStrings"
			],
			[
				"em",
				"EMAIL_ID_LINKED_WITH_ANOTHER_ACCOUNT\tmixed"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 372.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/var/www/html/bounteeUI",
		"/var/www/html/bounteeUI/css",
		"/var/www/html/bounteeUI/js",
		"/var/www/html/bounteeUI/views"
	],
	"file_history":
	[
		"/var/www/html/bounteeUI/views/home.html",
		"/var/www/html/bounteeUI/js/config.js",
		"/var/www/html/bounteeUI/js/app.js",
		"/var/www/html/bounteeUI/index.html",
		"/var/www/html/bounteeUI/views/landing.html",
		"/home/nitesh/Downloads/Angular_Full_Version/Angular_Full_Version1/js/controllers.js",
		"/home/nitesh/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/nitesh/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/var/www/html/peoplehub/src/Locale/en_US/default.po",
		"/var/www/html/peoplehub/src/Controller/AdminController.php",
		"/var/www/html/peoplehub/config/bootstrap.php",
		"/var/www/html/peoplehub/config/routes.php",
		"/var/www/html/peoplehub/src/Controller/Api/UsersController.php",
		"/var/www/html/peoplehub/src/Controller/Api/ResellerBillingsController.php",
		"/var/www/html/peoplehub/src/Controller/Api/RewardCreditsController.php",
		"/var/www/html/peoplehub/src/Controller/Api/UserCardsController.php",
		"/var/www/html/peoplehub/src/Controller/Api/VendorBillingsController.php",
		"/var/www/html/peoplehub/src/Controller/Api/VendorsController.php",
		"/var/www/html/peoplehub/config/app.php",
		"/var/www/html/peoplehub/vendor/sourcefuse/tangocard/src/TangoCardBase.php",
		"/var/www/html/peoplehub/src/Controller/RedeemedCreditsController.php",
		"/var/www/html/peoplehub/src/Controller/Component/PeopleHubComponent.php",
		"/var/www/html/peoplehub/src/Controller/AppController.php",
		"/var/www/html/peoplehub/src/Controller/Api/vendor-bkp-api.php",
		"/var/www/html/peoplehub/src/Model/Table/UsersTable.php",
		"/var/www/html/peoplehub/src/Model/Table/RolesTable.php",
		"/var/www/html/peoplehub/config/Seeds/UsersSeed.php",
		"/var/www/html/peoplehub/config/Seeds/AdminSeed.php",
		"/var/www/html/peoplehub/config/Migrations/20160729143829_NewDbStructure.php",
		"/var/www/html/peoplehub/src/Template/Admin/login.ctp",
		"/var/www/html/peoplehub/src/Controller/Api/ActivitiesController.php",
		"/var/www/html/peoplehub/src/Model/Entity/User.php",
		"/var/www/html/peoplehub/src/Controller/Api/RedeemedCreditsController.php",
		"/var/www/html/peoplehub/composer.json",
		"/var/www/html/peoplehub/src/Template/Users/search.ctp",
		"/var/www/html/buzzyadmin/src/Template/Users/edit.ctp",
		"/var/www/html/buzzyadmin/src/Template/Layout/login-admin.ctp",
		"/var/www/html/buzzyadmin/webroot/js/super_admin.js",
		"/var/www/html/buzzyadmin/src/Template/Users/force_reset_password.ctp",
		"/var/www/html/buzzyadmin/src/Template/Users/reset_password.ctp",
		"/var/www/html/buzzyadmin/src/Controller/UsersController.php",
		"/var/www/html/buzzyadmin/src/Controller/AppController.php",
		"/var/www/html/buzzyadmin/composer.json",
		"/var/www/html/buzzyadmin/vendor/jms/serializer/src/JMS/Serializer/XmlSerializationVisitor.php",
		"/var/www/html/buzzyadmin/.gitignore",
		"/var/www/html/buzzyadmin/src/Template/Layout/default.ctp",
		"/var/www/html/buzzyadmin/src/Controller/Api/UsersController.php",
		"/var/www/html/buzzyadmin/vendor/cakephp/cakephp/src/Auth/DefaultPasswordHasher.php",
		"/var/www/html/buzzyadmin/vendor/cakephp/cakephp/src/Controller/Component/AuthComponent.php",
		"/var/www/html/buzzyadmin/src/Model/Entity/User.php",
		"/var/www/html/buzzyadmin/src/Model/Entity/ResetPasswordHash.php",
		"/var/www/html/buzzyadmin/src/Model/Entity/UserOldPassword.php",
		"/var/www/html/buzzyadmin/vendor/cakephp/cakephp/src/Auth/AbstractPasswordHasher.php",
		"/var/www/html/buzzyadmin/src/Template/Users/forgot_password.ctp",
		"/var/www/html/buzzyadmin/src/Model/Table/UserOldPasswordsTable.php",
		"/var/www/html/buzzyadmin/src/Locale/en_US/default.po",
		"/var/www/html/buzzyadmin/src/Template/Users/add.ctp",
		"/var/www/html/buzzyadmin/src/Template/Users/login.ctp",
		"/var/www/html/buzzyadmin/src/Controller/Api/LegacyRedemptionsController.php",
		"/var/www/html/buzzyadmin/src/Controller/Api/VendorsController.php",
		"/var/www/html/buzzyadmin/src/Model/Table/UsersTable.php",
		"/var/www/html/buzzyadmin/config/Migrations/20161004042228_AddIsDeletedToUserOldPasswords.php",
		"/var/www/html/buzzyadmin/config/routes.php",
		"/var/www/html/buzzyadmin/config/Migrations/20161003034539_CreateUserOldPasswords.php",
		"/var/www/html/buzzyadmin/src/Template/Element/Navigation/sidenav.ctp",
		"/var/www/html/buzzyadmin/webroot/css/super-admin.css",
		"/var/www/html/buzzyadmin/src/Template/Element/search-panel.ctp",
		"/var/www/html/buzzyadmin/src/Template/Users/dashboard.ctp",
		"/var/www/html/buzzyadmin/src/Template/Users/index.ctp",
		"/var/www/html/buzzyadmin/src/Template/Element/Navigation/staffmanager-sidenav.ctp",
		"/var/www/html/buzzyadmin/src/Template/Element/Navigation/staffadmin-sidenav.ctp",
		"/var/www/html/buzzyadmin/config/app.php",
		"/var/www/html/peoplehub/src/Model/Entity/VendorRedeemedCredit.php",
		"/var/www/html/peoplehub/src/Model/Entity/VendorBilling.php",
		"/var/www/html/peoplehub/src/Model/Table/VendorCardsTable.php",
		"/var/www/html/peoplehub/src/Model/Entity/VendorContact.php",
		"/var/www/html/peoplehub/src/Model/Entity/VendorRewardType.php",
		"/var/www/html/peoplehub/src/Model/Entity/Vendor.php",
		"/var/www/html/peoplehub/src/Model/Table/VendorRedeemedCreditsTable.php",
		"/var/www/html/peoplehub/src/Model/Table/UserCardsTable.php",
		"/var/www/html/peoplehub/src/Model/Table/SettingsTable.php",
		"/var/www/html/peoplehub/src/Model/Table/ServicesTable.php",
		"/var/www/html/peoplehub/src/Model/Table/RewardCreditsTable.php",
		"/var/www/html/peoplehub/src/Model/Table/ResellersTable.php",
		"/var/www/html/peoplehub/src/Model/Entity/RewardMethod.php",
		"/var/www/html/peoplehub/src/Model/Table/RewardMethodsTable.php",
		"/var/www/html/peoplehub/src/Model/Table/CardSeriesTable.php",
		"/var/www/html/peoplehub/src/Model/Entity/Activity.php",
		"/var/www/html/peoplehub/src/Model/Table/RedeemedCreditsTable.php",
		"/var/www/html/peoplehub/src/Model/Table/ResellerBillingsTable.php",
		"/var/www/html/peoplehub/src/Model/Table/ResellerContactsTable.php",
		"/var/www/html/peoplehub/config/Migrations/20160804132420_CreateResellers.php",
		"/var/www/html/peoplehub/config/Seeds/VendorsSeed.php",
		"/var/www/html/peoplehub/config/Migrations/20160804132437_CreateResellerContacts.php",
		"/var/www/html/peoplehub/config/Migrations/20160805074312_CreateUserCards.php",
		"/var/www/html/peoplehub/config/Migrations/20160808170707_CreateVendorContacts.php",
		"/var/www/html/peoplehub/config/Migrations/20160808171025_CreateResellerVendors.php",
		"/var/www/html/peoplehub/config/Migrations/20160810074716_CreateRewardCredit.php",
		"/var/www/html/peoplehub/config/Migrations/20160811100306_CreateServices.php",
		"/var/www/html/peoplehub/config/Migrations/20160812072957_CreateActivities.php",
		"/var/www/html/peoplehub/config/Migrations/20160817062241_CreateSettings.php",
		"/var/www/html/peoplehub/config/Migrations/20160817085327_CreateBillings.php",
		"/var/www/html/peoplehub/config/Migrations/20160823100947_CreateResellerBillings.php",
		"/var/www/html/peoplehub/config/Migrations/20160817113013_AddStatusToRewardCredits.php",
		"/var/www/html/peoplehub/config/Migrations/20160825100412_CreateVendorRedeemedCredits.php",
		"/var/www/html/peoplehub/config/Migrations/20160811114839_CreateRedeemedCredits.php",
		"/var/www/html/buzzyadmin/src/Template/Promotions/edit.ctp",
		"/var/www/html/buzzyadmin/src/Controller/LegacyRewardsController.php",
		"/var/www/html/buzzyadmin/src/Template/LegacyRewards/edit.ctp",
		"/var/www/html/buzzyadmin/src/Template/Promotions/index.ctp",
		"/var/www/html/buzzyadmin/src/Template/LegacyRewards/add.ctp",
		"/var/www/html/buzzyadmin/src/Model/Entity/LegacyReward.php",
		"/var/www/html/buzzyadmin/src/Model/Table/LegacyRewardsTable.php",
		"/var/www/html/buzzyadmin/src/Template/LegacyRewards/index.ctp",
		"/var/www/html/buzzyadmin/src/Template/LegacyRewards/view.ctp",
		"/var/www/html/buzzyadmin/config/Migrations/20160921074550_RemoveColumnsFromPromotions.php",
		"/var/www/html/buzzyadmin/src/Controller/VendorsController.php",
		"/var/www/html/buzzyadmin/vendor/josegonzalez/cakephp-upload/src/Model/Behavior/UploadBehavior.php",
		"/var/www/html/buzzyadmin/config/bootstrap.php",
		"/var/www/html/buzzyadmin/vendor/josegonzalez/cakephp-upload/src/File/Path/Filename/DefaultTrait.php",
		"/var/www/html/peoplehub/logs/debug.log",
		"/var/www/html/Buzzy/src/Model/Table/UsersTable.php",
		"/var/www/html/Buzzy/src/Model/Table/VendorsTable.php",
		"/var/www/html/Buzzy/src/Model/Entity/User.php",
		"/var/www/html/newBuzzy/src/Model/Table/BuzzyDocPlansTable.php",
		"/var/www/html/newBuzzy/src/Model/Entity/Vendor.php",
		"/var/www/html/newBuzzy/src/Controller/Component/PeopleHubComponent.php",
		"/var/www/html/newBuzzy/src/Controller/AdminController.php"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"/var/www/html/peoplehub/src/Controller/Api",
			"/var/www/html/peoplehub/src",
			"/var/www/html/peoplehub/src/Controller/Api"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"home",
			");\n",
			"updateall",
			"\n}",
			".'));",
			"['email']",
			"        \n",
			"tangoCard",
			"tangocard",
			"TangoCard",
			"tangocard",
			"createTangoCardAccount",
			"vendorRedeemed",
			"_validateRequestdata",
			"Registered",
			"data[x]",
			";\n",
			"_validateRequestdata(",
			"++;\n",
			"1",
			"pr($user);\n        die('ss');",
			"isAuthorized",
			"all",
			"],\n",
			"isAuthori",
			"\"\n",
			"');\n",
			"webroo",
			"build",
			"url",
			"alert(",
			"uuid",
			"',$uuid",
			"$uuid",
			"uuid",
			"'uuid'",
			"DOMDocument",
			"isPasswordResetRequired",
			"?",
			"ResetPasswordHashes",
			"pr",
			"time",
			".error",
			"new_password",
			"password",
			"min",
			"ata-min",
			"data",
			"data-min",
			"resetPassword",
			"      \n",
			";\n",
			"forgotPassword'",
			"d'",
			" $",
			"billUptoDate",
			"reqData",
			"forgotpas",
			"updatePassword",
			"sm-10",
			"password",
			"UserOldPassword",
			"user",
			"<?php\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Network\\Session;\n\n/**\n* Users Controller\n*\n* @property \\App\\Model\\Table\\UsersTable $Users\n*/\nclass UsersController extends AppController\n{\n  const SUPER_ADMIN_LABEL = 'admin';\n  const STAFF_ADMIN_LABEL = 'staff_admin';\n  const STAFF_MANAGER_LABEL = 'staff_manager';\n  \n\n  public function initialize(){\n    parent::initialize();\n    $this->Auth->config('authorize', ['Controller']);\n    // $this->loadComponent('AuthorizeDotNet');\n  }\n  public function dashboard(){\n    $loggedInUser = $this->Auth->user();\n    if($loggedInUser['role']->name == self::SUPER_ADMIN_LABEL){\n      $users =   $this->Users->find('all', \n        [\n        'contain' => ['Roles', 'Vendors']] );\n    }\n    else if($loggedInUser['role']->name == self::STAFF_ADMIN_LABEL){\n      $users =  $this->Users->find('all', \n        [\n        'contain' => ['Roles', 'Vendors'],\n        'conditions' => ['vendor_id =' => $this->Auth->user('vendor_id'),'Roles.name <>'=>self::SUPER_ADMIN_LABEL]\n        ]);\n    }\n    else {\n      $users =  $this->Users->find('all', \n        [\n        'contain' => ['Roles', 'Vendors'],\n        'conditions' => ['vendor_id =' => $this->Auth->user('vendor_id'), 'Roles.name'=>self::STAFF_MANAGER_LABEL]\n        ]);\n    }\n    $users = $this->paginate($users);\n\n    $this->set(compact('users'));\n    $this->set('_serialize', ['users']);\n  }\n\npublic function updatePassword(){\n  \n}\n\n    /**\n     * Index method\n     *\n     * @return \\Cake\\Network\\Response|null\n     */\n\n\n    public function index()\n    {\n      $loggedInUser = $this->Auth->user();\n      if($loggedInUser['role']->name == self::SUPER_ADMIN_LABEL){\n        $users =   $this->Users->find('all', \n          [\n          'contain' => ['Roles', 'Vendors']] );\n      }\n      else if($loggedInUser['role']->name == self::STAFF_ADMIN_LABEL){\n        $users =  $this->Users->find('all', \n          [\n          'contain' => ['Roles', 'Vendors'],\n          'conditions' => ['vendor_id =' => $this->Auth->user('vendor_id'),'Roles.name <>'=>self::SUPER_ADMIN_LABEL]\n          ]);\n      }\n      else {\n        $users =  $this->Users->find('all', \n          [\n          'contain' => ['Roles', 'Vendors'],\n          'conditions' => ['vendor_id =' => $this->Auth->user('vendor_id'), 'Roles.name'=>self::STAFF_MANAGER_LABEL]\n          ]);\n      }\n      $users = $this->paginate($users);\n\n      $this->set(compact('users'));\n      $this->set('_serialize', ['users']);\n\n    }\n\n    /**\n     * View method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Network\\Response|null\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.\n     */\n    public function view($id = null)\n    {\n      $user = $this->Users->findById($id)->contain(['Vendors', 'Roles'])->first();\n      if(!$user){\n        $this->Flash->error(__('USER NOT FOUND'));\n        return $this->redirect(['action' => 'index']);\n      }\n      $this->set('user', $user);\n      $this->set('_serialize', ['user']);\n\n    }\n\n    /**\n     * Add method\n     *\n     * @return \\Cake\\Network\\Response|void Redirects on successful add, renders view otherwise.\n     */\n    public function add()\n    {\n\n      $user = $this->Users->newEntity();\n      if ($this->request->is('post')) {\n        $user = $this->Users->patchEntity($user, $this->request->data);\n        if(!$user->errors()){  \n          if ($this->Users->save($user)) {\n            $this->Flash->success(__('The user has been saved.'));\n\n            return $this->redirect(['action' => 'index']);\n          } else {\n            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n          }\n        }else{\n\n          $this->Flash->error(__('KINDLY_PROVIDE_VALID_DATA'));\n        }\n      }\n      \n      $loggedInUser = $this->Auth->user();\n\n      if($loggedInUser['role']->name == self::SUPER_ADMIN_LABEL){\n\n        $vendors = $this->Users->Vendors->find('list')->where(['status'=>1])->all()->toArray();\n        $roles = $this->Users->Roles->find('list')->where(['status'=>1])->all()->toArray();\n\n      }else {\n       $vendors = $this->Users->Vendors->find('list')->where(['status'=>1, 'id'=>$loggedInUser['vendor_id']])->all()->toArray();\n       // pr($vendors);\n       $roles = $this->Users->Roles->find('list')->where(['status'=>1,'name <>'=>'admin'])->all()->toArray();\n     }\n     $this->set('roles', $roles);\n     $this->set('vendors', $vendors);\n     $this->set('user', $user);\n     $this->set('_serialize', ['user']);\n\n   }\n\n    /**\n     * Edit method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Network\\Response|void Redirects on successful edit, renders view otherwise.\n     * @throws \\Cake\\Network\\Exception\\NotFoundException When record not found.\n     */\n    public function edit($id = null)\n    {\n      $user = $this->Users->findById($id)->contain(['Vendors'])->first();\n      if(!$user){\n        $this->Flash->error(__('USER NOT FOUND'));\n        return $this->redirect(['action' => 'index']);\n      }\n      if ($this->request->is(['patch', 'post', 'put'])) {\n        $user = $this->Users->patchEntity($user, $this->request->data);\n        if(!$user->errors()){  \n          if ($this->Users->save($user)) {\n            $this->Flash->success(__('The user has been saved.'));\n\n            return $this->redirect(['action' => 'index']);\n          } else {\n            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n          }\n        }else{\n\n          $this->Flash->error(__('KINDLY_PROVIDE_VALID_DATA'));\n        }\n      }\n      $loggedInUser = $this->Auth->user();\n\n      if($loggedInUser['role']->name == self::SUPER_ADMIN_LABEL){\n\n        $vendors = $this->Users->Vendors->find('list')->where(['status'=>1])->all()->toArray();\n        $roles = $this->Users->Roles->find('list')->where(['status'=>1])->all()->toArray();\n        \n      }else if($loggedInUser['role']->name == self::STAFF_ADMIN_LABEL){\n       $vendors = $this->Users->Vendors->find('list')\n       ->where(['status'=>1, 'id'=>$loggedInUser['vendor_id']])\n       ->all()\n       ->toArray();\n\n       $roles = $this->Users->Roles->find('list')\n       ->where(['status'=>1,'name <>'=>'admin'])\n       ->all()\n       ->toArray();\n\n     }\n     else {\n      $vendors = $this->Users->Vendors->find('list')\n      ->where(['status'=>1, 'id'=>$loggedInUser['vendor_id']])\n      ->all()\n      ->toArray();\n      $roles = $this->Users->Roles->find('list')\n      ->where(['status'=>1,'name'=>'staff_manager'])\n      ->all()\n      ->toArray();\n    }\n\n    \n    $this->set(compact('user','vendors','roles'));\n    $this->set('_serialize', ['user']);\n  }\n\n    /**\n     * Delete method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Network\\Response|null Redirects to index.\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.\n     */\n    public function delete($id = null)\n    {\n      $this->request->allowMethod(['post', 'delete']);\n      $user = $this->Users->get($id);\n      if ($this->Users->delete($user)) {\n        $this->Flash->success(__('The user has been deleted.'));\n      } else {\n        $this->Flash->error(__('The user could not be deleted. Please, try again.'));\n      }\n\n      return $this->redirect(['action' => 'index']);\n    }\n\n    public function login()\n    {\n        // Layout for the admin login\n      $this->viewBuilder()->layout('login-admin');\n      if ($this->request->is('post')) {\n        $user = $this->Auth->identify();\n        if ($user) {\n          $this->loadModel('Roles');\n          $user['role'] = $query = $this->Roles->find('RolesById', ['role' => $user['role_id']])->select(['name', 'label'])->first();  \n          $this->Auth->setUser($user);\n          \n          $this->redirect(['controller' => 'Users',\n            'action' => 'index'\n            ]);\n\n        }            \n      }\n    }\n    public function isAuthorized($user)\n    {\n\n      $action = $this->request->params['action'];\n    // The add and index actions are always allowed.\n      if (in_array($action, ['logout'])) {\n        return true;\n      }\n\n      if (in_array($action, ['index', 'view', 'edit','dashboard']) && $user['role']->name === 'staff_manager') {\n        return true;\n      }\n\n      if (in_array($action, ['add','index', 'view', 'edit','delete','dashboard']) && $user['role']->name === 'admin') {\n        return true;\n      }\n\n      if (in_array($action, ['add','index','view','delete','edit','dashboard']) && in_array($user['role']->name, ['staff_admin'])) {\n        return true;\n      }\n\n      // All other actions require an id.\n      if (empty($this->request->params['pass'][0])) {\n        return false;\n      }\n\n\n      return parent::isAuthorized($user);\n    }\n\n     /**\n    * This method is to logout user\n    *\n    **/\n     public function logout()\n     {\n      $user = $this->Auth->user();\n      $this->Flash->success('You are now logged out.');\n      if ($user['role']['name'] == self::SUPER_ADMIN_LABEL) {\n\n        $this->Auth->logout();\n        $session = new Session();\n        $session->destroy();\n        $this->redirect(['controller' => 'users',\n          'action' => 'login'\n          ]);\n      } else {\n        $this->redirect($this->Auth->logout());\n      }\n    }\n\n  }",
			"div",
			"default",
			"row",
			"    .#collapseSearchResponse .list-group :nth-child(6n), .#collapseSearchResponse .list-group\t.row :nth-child(6n-1), .#collapseSearchResponse .list-group\t.row :nth-child(6n-2) {\n",
			"row",
			"group\t.row",
			"\t.row",
			"row",
			" .row",
			".row",
			"''",
			"updateB",
			"fadeOut",
			"response-accordion",
			"span",
			"-3",
			"-",
			"row",
			"label",
			"span",
			"collapseResponse",
			"}",
			"});",
			" <br/>",
			"card number <br/>",
			" car number",
			"number",
			"/>\n",
			"numbers",
			"email",
			"hidden-xs",
			"hidden-xs hidden-sm",
			"<?php\nnamespace App\\Controller\\Api;\n\nuse App\\Controller\\Api\\ApiController;\nuse Cake\\Utility\\Security;\nuse Firebase\\JWT\\JWT;\nuse Cake\\Network\\Session;\nuse Cake\\Network\\Exception\\MethodNotAllowedException;\nuse Cake\\Network\\Exception\\BadRequestException;\nuse Cake\\Network\\Exception\\UnauthorizedException;\nuse Cake\\Network\\Exception\\ConflictException;\nuse Cake\\Network\\Exception\\InternalErrorException;\nuse Cake\\Network\\Exception\\NotFoundException;\n\n    /**\n     * Users Controller\n     *\n     * @property \\App\\Model\\Table\\UsersTable $Users\n     */\n    class UsersController extends ApiController\n    {   \n\n       const USER_LABEL='user';\n\n       public function initialize()\n       {\n        parent::initialize();\n        $this->loadComponent('RequestHandler');\n        $this->Auth->allow(['index','add','logout','token','login','edit','view','delete']);\n    }\n\n    public function index()\n    {\n        if (!$this->request->is(['get'])) {\n            throw new MethodNotAllowedException(__('BAD_REQUEST'));\n        }\n        $this->paginate = [\n        'contain' => ['Roles']\n        ];\n        $users = $this->paginate($this->Users);\n        $data =array();\n        $data['status']=true;\n        $data['data']['id']=$users;\n        $this->set('response',$data);\n        $this->set('_serialize', ['response']);\n    }\n\n    /**\n     * @api {post} /api/users/ Register New User\n     * @apiVersion 1.0.0\n     * @apiName add\n     * @apiGroup Users\n     *\n     * @apiParam {String} email User's email ID.\n     * @apiParam {String} password User's Password.\n     * @apiParam {String} name  User's Name.\n     * @apiParam {String} phone  User's Phone number.\n     *\n     * @apiSuccess {Boolean} success status of the request.\n     *\n     * @apiSuccessExample Success-Response:\n     *     HTTP/1.1 200 OK\n     *     {\n     *      \"response\": {\n     *                    \"status\": true,\n     *                    \"data\": {\n     *                              \"id\": 8\n     *                              }\n     *                  }\n     *      }\n     *\n     */\n    public function add()\n    {\n     if (!$this->request->is(['post'])) {\n        throw new MethodNotAllowedException(__('BAD_REQUEST'));\n    }\n    $this->log('Line: ' . __LINE__ . ' - add user: request data type : ' . gettype($this->request->data),'debug');\n    $this->log($this->request->data,'debug');\n\n    if(!$this->request->data){\n        throw new BadRequestException(__('BAD_REQUEST'));\n    }\n\n    $userData = $this->Users->newEntity($this->request->data);\n    $userData = $this->Users->patchEntity($userData, $this->request->data);\n\n    if($userData->errors()){\n        //$this->_errorParser($userData);\n    }\n\n    if ($this->Users->save($userData)) {\n            //allocate unallocated points to user \n       $this->_associteUnAllocatedPoints($userData);\n         //return response\n       $data =array();\n       $data['status']=true;\n       $data['data']['id']=$userData->id;\n       $this->set('response',$data);\n       $this->set('_serialize', ['response']);\n   } else {\n     $this->log('Line: ' . __LINE__ . ' - error occured: ' . gettype($userData),'debug'); \n     $this->log($userData->errors(),'debug');\n     throw new InternalErrorException(__('INTERNAL_SERVER_ERROR'));\n }\n\n}\n\n  /**\n   * @param  array $userData contains user data\n   * @return Boolean return True \n   */\n  private function _associteUnAllocatedPoints($userData){\n    $this->loadModel('RewardCredits');\n    //if phone present then associate all the rewards to this newly registered user having phone and email \n    if($this->_strictValidate($userData,'phone')){\n        $this->RewardCredits->updateAll(['user_id'=>$userData->id],\n            ['OR' => [\n            [['attribute_type'=>'phone'],['attribute' => $userData->phone]],\n            [['attribute_type'=>'email'],['attribute' => $userData->email]]\n            ],'user_id IS NULL']\n            );\n    }else{\n    //Associate all the rewards to this newly registered user having the email\n      $this->RewardCredits->updateAll(['user_id'=>$userData->id],\n        ['attribute_type'=>'email','attribute' => $userData->email,'user_id IS NULL']); \n  }\n  return TRUE;\n}\n    /**\n     * @apiDefine InvalidCredentialError\n     * @apiError InvalidCredential Provided Credentials didn't match with any account.\n     *\n     */\n\n   /**\n     * @api {post} /api/users/login Login User\n     * @apiVersion 1.0.0\n     * @apiName login\n     * @apiGroup Users\n     *\n     * @apiParam {String} email Users email ID.\n     * @apiParam {String} password Users Password.\n     *\n     * @apiSuccess {Boolean} status status of the request.\n     * @apiSuccess {Number} id ID of the User.\n     * @apiSuccess {String} token  Auth Token.\n     *\n     * @apiSuccessExample Success-Response:\n     *     HTTP/1.1 200 OK\n     *     {\n     *      \"response\": {\n     *                    \"status\": true,\n     *                    \"data\": {\n     *                             \"id\": 7,\n     *                             \"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOjcsImV4cCI6MTQ3MDc0NDI5MX0.i1Jxt5__1oOlmltXoOVIC-17f4rM48nl4uzkahWmU1c\"\n     *                            }\n     *                  }\n     *     }\n     *\n     */\n   public function login()\n   {   \n       if (!$this->request->is(['post'])) {\n        throw new MethodNotAllowedException(__('BAD_REQUEST'));\n    }\n\n\n    if(!$this->request->data){\n        throw new BadRequestException(__('BAD_REQUEST'));\n    }\n    $data = $this->request->data;\n\n            //validate email\n    if(!isset($data['email']) || (isset($data['email']) && empty($data['email']))){\n        throw new BadRequestException(__('MANDATORY_FIELD_MISSING','email'));\n    }\n            //validate password\n    if(!isset($data['password']) || (isset($data['password']) && empty($data['password']))){\n        throw new BadRequestException(__('MANDATORY_FIELD_MISSING','password'));\n    }\n\n            //if user is identified and his role is User then create user session \n    $user = $this->Auth->identify();\n    if (!$user) {\n     throw new NotFoundException(__('LOGIN_FAILED'));   \n }\n            //find role id\n $this->loadModel('Roles');\n            //verify user role\n $user['role']=$query = $this->Roles->find('RolesById',['role' =>$user['role_id']])->select(['name','label'])->first();\n            //login user\n $this->Auth->setUser($user);\n            //if user role is not USER the logout \n if( empty($query) || $query->name!=self::USER_LABEL){\n   $this->log('Line: ' . __LINE__ . ' - login user: request data type : ' . gettype($this->request->data),'debug');\n   $this->log($this->request->data,'debug');\n   $this->Auth->logout();\n   throw new UnauthorizedException(__('UNAUTHORIZED_REQUEST')); \n}else{\n   $this->log('Line: ' . __LINE__ . ' - login user: request data type : ' . gettype($this->request->data),'debug');\n   $this->log($this->request->data,'debug');\n                // if user is disabled then log out \n   if(!$user['status']){\n    $this->Auth->logout();\n    throw new UnauthorizedException(__('UNAUTHORIZED_REQUEST_USER_DISABLED')); \n}else{\n                //login user, create a token and create session for the user\n    $data =array();\n    $data['status']=true;\n    $data['data']['id']=$user['id'];\n    $data['data']['token']=JWT::encode(['sub' => $user['id'],'exp' =>  time() + 604800],Security::salt());\n    $data['data']['expires']=time() + 604800;\n    $session = new Session();\n    $sessionData = $session->write('u_t_'.$data['data']['token'], $user['id']); \n    $this->set('response',$data);\n    $this->set('_serialize', ['response']);\n}\n}\n\n\n}\n\n    /**\n     * @apiDefine InvalidCredentialError\n     * @apiError InvalidCredential Provided Credentials didn't match with any account.\n     *\n     */\n\n    /**\n     * @api {post} /users/logout Logout User\n     * @apiVersion 1.0.0\n     * @apiName logout\n     * @apiGroup Users\n     * @apiSuccessExample Success-Response:\n     *     HTTP/1.1 200 OK\n     *     {\n     *   \"response\": {\n     *   \"status\": true,\n     *   \"data\": {\n     *          \"message\": \"User Logged out Successfully\"\n     *          }\n     *      }\n     *   }\n     */\n\n/**\n* This method is used to logout user and to remove session\n* @return Mixed return array if user is logged out else throws error\n*/\npublic function logout()\n{\n    if ($this->request->is(['post'])) {\n//find token\n        $token = $this->request->header('token');\n//validate token\n        $userId = $this->_validateAuthToken($token,TRUE);\n        if(!$userId){\n            throw new UnauthorizedException(__('INVALID_TOKEN_PROVIDED'));   \n        }else{\n            $token = explode(' ', $token);\n            if(isset($token[0]) && !empty($token[0]) && strtolower($token[0])=='bearer'){   \n        //remove user token\n                if(isset($token[1]) && !empty($token[1])){\n                    $token = $token[1];\n                    $session = new Session();\n                    $sessionData = $session->delete('u_t_'.$token); \n                    $data =array();\n                    $data['status']=true;\n                    $data['data']['message']='User Logged out Successfully';                \n                    $this->set('response',$data);\n                    $this->set('_serialize', ['response']);\n                }\n\n            }\n        }\n    }else{\n        throw new MethodNotAllowedException(__('BAD_REQUEST'));    \n    }\n\n}\n\n /**\n     * Edit method\n     *\n     * @param string|null $id User id.\n     * @return \\Cake\\Network\\Response|void Redirects on successful edit, renders view otherwise.\n     * @throws \\Cake\\Network\\Exception\\NotFoundException When record not found.\n     */\n public function edit($id = null)\n {\n    if (!$this->request->is(['put'])) {\n        throw new MethodNotAllowedException(__('BAD_REQUEST'));\n    }\n    if(!$this->request->data){\n        throw new BadRequestException(__('BAD_REQUEST'));\n    }\n\n    $user = $this->Users->findById($id)->first();\n    if(!$user){\n        throw new NotFoundException(__('ENTITY_DOES_NOT_EXISTS','User'));\n    } \n\n    $user = $this->Users->patchEntity($user, $this->request->data);\n\n    if($user->errors()){\n        //$this->_errorParser($userData);\n    }\n\n    if ($this->Users->save($user)) {\n        $data =array();\n        $data['status']=true;\n        $data['data']['message']=$user;                \n        $this->set('response',$data);\n        $this->set('_serialize', ['response']);\n    }else{\n        $this->log('Line: ' . __LINE__ . ' - error occured: Dumpting patch response' . gettype($user),'debug'); \n        $this->log($user,'debug');\n        throw new InternalErrorException(__('INTERNAL_SERVER_ERROR'));\n    }\n}\n    /**\n     * View method\n     *\n     * @param string|null $id Wallet Credit id.\n     * @return \\Cake\\Network\\Response|void Redirects on successful edit, renders view otherwise.\n     * @throws \\Cake\\Network\\Exception\\NotFoundException When record not found.\n     */\n    public function view($id = null)\n    {\n    //this request is not allowed yet\n      throw new NotFoundException(__('BAD_REQUEST'));\n  }\n    /**\n     * Delete method\n     *\n     * @param string|null $id Wallet Credit id.\n     * @return \\Cake\\Network\\Response|null Redirects to index.\n     * @throws \\Cake\\Datasource\\Exception\\RecordNotFoundException When record not found.\n     */\n    public function delete($id = null)\n    {\n        //this request is not allowed yet\n        throw new NotFoundException(__('BAD_REQUEST'));\n    }\n}\n",
			"$data",
			"name",
			">\n",
			";\n",
			");\n",
			"}',\n",
			"unction _formatError($data,$parentKey=false){\n//     // pr($data);\n//     foreach ($data as $key => $value) {\n//         $this->_errorData[]=$key;\n        \n//     }\n//     pr($this->_errorData);\n\n// }",
			"pr(",
			"_formatError",
			" ($",
			"->add('phone', 'custom', [\n         'rule' => function ($value, $context) {\n             if ( preg_match( '/^[+]?([\\d]{0,3})?[\\(\\.\\-\\s]?([\\d]{3})[\\)\\.\\-\\s]*([\\d]{3})[\\.\\-\\s]?([\\d]{4})$/', $context['data']['phone'] ) ) {\n                 if(strlen($context['data']['phone']) == 10 || $context['data']['phone'] == 15){\n                    return TRUE;\n                }else{\n                    return FALSE;\n                }\n                \n            } else {\n                return FALSE;\n            }\n        },\n        'message' => 'Invalid phone Number.'\n        ]);",
			"\t\t\t\t\t\t",
			")){\n",
			"phone",
			"login",
			"buzz",
			"vendor",
			"district",
			"();\n",
			"vendorBillings",
			"PROVIDED_MONTH_BILL_CANNOT_BR_GENERATED",
			"msgid \"PROVIDED_MONTH_BILL_CANNOT_BR_GENERATED\"\n",
			" 8",
			"client_secret",
			"storecre",
			"  ",
			" 8",
			"8",
			"*/\n",
			"} ",
			"]"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "bountiUI.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"def",
				"src/Locale/en_US/default.po"
			],
			[
				".po",
				"src/Locale/en_US/default.po"
			],
			[
				"super",
				"webroot/js/super_admin.js"
			],
			[
				"app",
				"config/app.php"
			],
			[
				"super_ad",
				"webroot/js/super_admin.js"
			],
			[
				"sup",
				"webroot/js/super_admin.js"
			],
			[
				"supera",
				"webroot/js/super_admin.js"
			],
			[
				".gi",
				".gitignore"
			],
			[
				"composer",
				"composer.json"
			],
			[
				"default",
				"src/Locale/en_US/default.po"
			],
			[
				"defaul",
				"src/Locale/en_US/default.po"
			],
			[
				"defau",
				"src/Locale/en_US/default.po"
			],
			[
				"userc",
				"src/Controller/Api/UsersController.php"
			],
			[
				"routes",
				"config/routes.php"
			],
			[
				"siden",
				"src/Template/Element/Navigation/sidenav.ctp"
			],
			[
				"defa",
				"src/Locale/en_US/default.po"
			],
			[
				"uploadbe",
				"vendor/josegonzalez/cakephp-upload/src/Model/Behavior/UploadBehavior.php"
			],
			[
				"legacyre",
				"src/Model/Table/LegacyRewardsTable.php"
			],
			[
				"appc",
				"src/Controller/AppController.php"
			],
			[
				"vendo",
				"src/Model/Entity/Vendor.php"
			],
			[
				"vend",
				"src/Model/Table/VendorsTable.php"
			],
			[
				"sidena",
				"src/Template/Element/Navigation/sidenav.ctp"
			],
			[
				"baseerr",
				"vendor/cakephp/cakephp/src/Error/BaseErrorHandler.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 289.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
